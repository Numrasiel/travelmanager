// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.travelmanager.web;

import com.travelmanager.domain.EndPoint;
import com.travelmanager.domain.Route;
import com.travelmanager.domain.StartPoint;
import com.travelmanager.web.ApplicationConversionServiceFactoryBean;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    declare @type: ApplicationConversionServiceFactoryBean: @Configurable;
    
    public Converter<Long, EndPoint> ApplicationConversionServiceFactoryBean.getIdToEndPointConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.travelmanager.domain.EndPoint>() {
            public com.travelmanager.domain.EndPoint convert(java.lang.Long id) {
                return EndPoint.findEndPoint(id);
            }
        };
    }
    
    public Converter<String, EndPoint> ApplicationConversionServiceFactoryBean.getStringToEndPointConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.travelmanager.domain.EndPoint>() {
            public com.travelmanager.domain.EndPoint convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), EndPoint.class);
            }
        };
    }
    
    public Converter<Route, String> ApplicationConversionServiceFactoryBean.getRouteToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.travelmanager.domain.Route, java.lang.String>() {
            public String convert(Route route) {
                return "(no displayable fields)";
            }
        };
    }
    
    public Converter<Long, Route> ApplicationConversionServiceFactoryBean.getIdToRouteConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.travelmanager.domain.Route>() {
            public com.travelmanager.domain.Route convert(java.lang.Long id) {
                return Route.findRoute(id);
            }
        };
    }
    
    public Converter<String, Route> ApplicationConversionServiceFactoryBean.getStringToRouteConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.travelmanager.domain.Route>() {
            public com.travelmanager.domain.Route convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Route.class);
            }
        };
    }
    
    public Converter<Long, StartPoint> ApplicationConversionServiceFactoryBean.getIdToStartPointConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.travelmanager.domain.StartPoint>() {
            public com.travelmanager.domain.StartPoint convert(java.lang.Long id) {
                return StartPoint.findStartPoint(id);
            }
        };
    }
    
    public Converter<String, StartPoint> ApplicationConversionServiceFactoryBean.getStringToStartPointConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.travelmanager.domain.StartPoint>() {
            public com.travelmanager.domain.StartPoint convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), StartPoint.class);
            }
        };
    }
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getEndPointToStringConverter());
        registry.addConverter(getIdToEndPointConverter());
        registry.addConverter(getStringToEndPointConverter());
        registry.addConverter(getRouteToStringConverter());
        registry.addConverter(getIdToRouteConverter());
        registry.addConverter(getStringToRouteConverter());
        registry.addConverter(getStartPointToStringConverter());
        registry.addConverter(getIdToStartPointConverter());
        registry.addConverter(getStringToStartPointConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
}
